<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_movil</parentName>
  <maskName>d_base1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_ani_ini(id, 1, 0);
// inicializa estructura genetica
for (var g = m_gen_total - 1; g &gt;= 0; g--) {
    adn[g] = 0;
}
// busca madres geneticas para copiar genes promedio con mutacion
var yo = id;
var tot = 0;
with o_alma {
    if id != yo and point_distance(yo.x, yo.y, x, y) &lt; m_area_madres {
        tot++;
        for (var g = 0; g &lt; m_gen_total; g++) {
            yo.adn[g] += adn[g];
        }
    }
}
if tot != 0 {
    for (var g = 0; g &lt; m_gen_total; g++) {
        if random(1) &lt; 1 / (m_almas_max * m_gen_total * 0.5) {
            adn[g] = random(1);
        }
        else {
            adn[g] /= tot;
            adn[g] = clamp(adn[g] +
                random_range(-m_mutacion_p, m_mutacion_p), 0, 1);
        }
    }
}
// sino inicializar genes al azar
else {
    for (var g = 0; g &lt; m_gen_total; g++) {
        adn[g] = random(1);
    }
}
// variables de funcionamiento
reloj_errar = 0;
direction = random(360);
mover = choose(true, false);
familia = 0; // cantidad de almas rodeando
culpa = m_culpa_ninguna;
reloj_socil = random(1);
dir_social = -1;
// envidia
virus = 0;
reloj_virus = 0;
// codicia
minax = x;
minay = y;
tesoro = 0;
reloj_mina = random(2);
ticket = 0;
// ira
reloj_fuego = 0;
// sonido
chilla = -1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var aux = instance_create(x, y, o_cadaver);
aux.culpa = culpa;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_ani_osci(id, 0, 1.2, 0.1);
// sonido
if chilla != -1 {
    chilla -= dlt;
    if chilla &lt;= 0 {
        chilla = -1;
        s_voz(x, y, culpa, false);
    }
}
// cambiar direccion al errar
reloj_errar -= dlt;
if reloj_errar &lt;= 0 {
    reloj_errar += s_fenotipo(m_gen_errar_reloj, adn) +
        random(s_fenotipo(m_gen_errar_reloj, adn));
    if mover {
        mover = s_fenotipo(m_gen_errar_mover, adn);
        direction += random_range(-90, 90);
    }
    else {
        mover = s_fenotipo(m_gen_errar_quieto, adn);
        direction = random(360);
    }
}
// tendencia social
reloj_socil -= dlt;
if reloj_socil &lt;= 0 {
    reloj_socil = random_range(1, 2);
    var ami = noone;
    var amx = familia;
    var yo = id;
    familia = 0;
    with o_alma {
        if id != yo and point_distance(yo.x, yo.y, x, y) &lt; m_vision {
            yo.familia++;
            if familia &gt; amx {
                amx = familia;
                ami = id;
            }
        }
    }
    if ami != noone {
        dir_social = point_direction(x, y, ami.x, ami.y);
    }
    else {
        dir_social = -1;
    }
}
// colision con objetos, luego ejecutar IA
if s_colisiones(id) {
    // errar libremente
    if !s_jugador(id, 1) and mover and o_control.despierto {
        if dir_social == -1 {
            var v = m_velocidad * dlt * m_alma_vel_p;
            x += lengthdir_x(v, direction);
            y += lengthdir_y(v, direction);
        }
        else {
            var f = s_fenotipo(m_gen_social, adn) * 0.5;
            var v1 = m_velocidad * dlt * m_alma_vel_p;
            var v2 = v1 * abs(f);
            v1 -= v2;
            x += lengthdir_x(v1, direction);
            y += lengthdir_y(v1, direction);
            x += lengthdir_x(v2, dir_social * sign(f));
            y += lengthdir_y(v2, dir_social * sign(f));
        }
    }
}
else {
    s_jugador(id, 0.333);
}
// prevenir salirse del mundo
s_limites(id);
// pegar o quitar virus
if virus != 0 {
    if culpa != m_culpa_envidia {
        virus = 0;
    }
    else {
        var ss = s_solo(m_culpa_envidia);
        if virus &gt;= 3 or ss {
            // morir
            reloj_virus -= dlt;
            if reloj_virus &lt;= 0 {
                if ss {
                    if random(1) &lt; (1 - 2 / (virus + 1)) * 0.6 {
                        instance_destroy();
                        exit;
                    }
                    else {
                        reloj_virus = m_reloj_accion;
                        virus++;
                    }
                }
                else {
                    instance_destroy();
                    exit;
                }
            }
        }
        if virus &lt; 3 or ss {
            // contagio
            var vict = collision_circle(x, y, 48, o_alma, true, true);
            if vict != noone {
                if vict.culpa != m_culpa_envidia {
                    vict.culpa = m_culpa_envidia;
                    if ss {
                        vict.virus = 1;
                    }
                    else {
                        vict.virus = virus + 1;
                    }
                    vict.chilla = random(m_delay_voz);
                    vict.reloj_virus = m_reloj_accion;
                    if !ss and (virus == 1 or random(1) &lt; m_antivirus_p) {
                        virus = 0;
                    }
                }
            }
        }
    }
}
// calcular valor del tesoro
if culpa == m_culpa_codicia {
    reloj_mina -= dlt;
    if reloj_mina &lt;= 0 {
        reloj_mina = random_range(1, 2);
        tesoro = s_minar(minax, minay);
        var newmina = s_minar(x, y);
        if newmina &gt; tesoro {
            tesoro = newmina;
            minax = x;
            minay = y;
        }
    }
}
// incendiarse
else if culpa == m_culpa_ira {
    if reloj_fuego &gt; 0 {
        reloj_fuego -= dlt;
        if reloj_fuego &lt;= 0 {
            if id == jugador and manual {
                if o_control.reloj_manual == 0 {
                    instance_destroy();
                    exit;
                }
                else {
                    chilla = random(m_delay_voz);
                }
            }
            else if !mover {
                instance_destroy();
                exit;
            }
            else {
                chilla = random(m_delay_voz);
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if arte {
    draw_sprite_ext(d_alma, culpa, x, y, 1, 1 + anima[0], 0, c_white, 1);
    if jugador == id {
        draw_sprite_ext(d_alma, 16, x, y, 1, 1 + anima[0], 0, c_white, 1);
    }
}
else {
    draw_sprite(d_base1, 0, x, y);
    if culpa != m_culpa_ninguna {
        draw_sprite_ext(d_base1, 0, x, y,
            0.5, 0.5, 0, s_color(culpa), 0.5);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
