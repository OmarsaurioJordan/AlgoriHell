<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
alarm[0] = irandom(room_speed * 10);
s_ventana();
draw_set_font(d_letras);
instance_create(0, 0, o_mantel);
audio_channel_num(100);
audio_falloff_set_model(audio_falloff_linear_distance);
audio_listener_orientation(0, 0, 1, 0, -1, 0);
audio_master_gain(0.8);
globalvar dlt, arte, jugador, manual, ver_puzzle;
dlt = 0;
arte = true; // muestra el mundo agradable isometrico
acelera = false; // pone en 2x la simulacion
reloj_oro = 0; // para crear mas oro
jugador = noone; // alma en mira de camara y manejo
manual = true; // manejar al jugador
reloj_manual = 0; // para que pereza sepa si jugador anda o no
clicdx = 0; // mover camara en simulacion
clicdy = 0;
seguirlo = noone; // movil en mira de camara simulacion
tooltip = ""; // muestra texto de ayuda de botones
ver_puzzle = false; // si muestra puzzle
ver_libro = false; // si muestra libro de puzzle resuelto
letras_trampa = ""; // acumulacion de caracteres trampa
ini_open("configuracion.ini");
if !ini_key_exists("config", "triunfo") {
    ini_write_string("config", "triunfo", "0");
}
triunfo = ini_read_string("config", "triunfo", "") == "1";
ini_close();
// PID
reloj_almas = random(1);
referencia = 100;
for (var i = m_pid_long - 1; i &gt;= 0; i--) {
    error[i] = 0;
}
despierto = true;
pid[0] = 0.2;
pid[1] = 0.1;
pid[2] = 0.05;
for (var i = m_pid_historial - 1; i &gt;= 0; i--) {
    historial[i] = 0;
}
// estructura de puzzle
var aux;
var v = 0;
for (var m = 0; m &lt; 9; m++) {
    for (var n = 0; n &lt; 3; n++) {
        aux = instance_create(100 + m * 100, 180 + n * 45, o_hoja);
        aux.verificar = v;
        v++;
    }
}
var ddd = ds_list_create();
for (var v = 0; v &lt; 27; v++) {
    ds_list_add(ddd, v);
}
ds_list_shuffle(ddd);
for (var m = 0; m &lt; 3; m++) {
    for (var n = 0; n &lt; 9; n++) {
        aux = instance_create(100 + m * 100, 180 + (n + 4) * 45, o_hoja);
        aux.tipo = m_hoj_pool;
        aux.datos = ds_list_find_value(ddd, 0);
        ds_list_delete(ddd, 0);
    }
}
ds_list_destroy(ddd);
for (var n = 0; n &lt; 8; n++) {
    aux = instance_create(900, 180 + (n + 5) * 45, o_hoja);
    if n == 7 {
        aux.tipo = m_hoj_exit;
        aux.depth -= 1;
    }
    else {
        aux.tipo = m_hoj_help;
        aux.datos = 27 + n;
    }
}
// crear botones
var aux;
var men = 0;
for (var b = 1; b &lt;= 22; b++) {
    if b == m_bot_gula {
        b = m_bot_rey + 1;
        men = 9 * 64;
    }
    aux = instance_create(b * 64 - 32 - men, 32, o_boton);
    aux.tipo = b;
}
men = m_width_gui * room_height / room_width;
for (var b = m_bot_gula; b &lt;= m_bot_rey; b++) {
    aux = instance_create((b - m_bot_gula + 1) * 64 - 32, men - 32, o_boton);
    aux.tipo = b;
}
for (var b = 24; b &lt;= 27; b++) {
    aux = instance_create((b - 23) * 64 - 32, 64 - 32, o_boton);
    aux.tipo = b;
}
with o_boton {
    if tipo == m_bot_ver {
        esgris = !esgris;
        break;
    }
}
s_cambia_camara();
// crear cosas iniciales
instance_create(room_width / 2, room_height / 2 + 96, o_rey);
instance_create(room_width * 0.25, room_height * 0.25 + 96, o_puerta);
instance_create(room_width * 0.25, room_height * 0.75 + 96, o_puerta);
instance_create(room_width * 0.75, room_height * 0.25 + 96, o_puerta);
instance_create(room_width * 0.75, room_height * 0.75 + 96, o_puerta);
instance_create(room_width * 0.25, 176, o_titulo);
with instance_create(room_width * 0.75, 176, o_titulo) { credito = true; }
s_crea_arbol();
instance_create(random(room_width),
    random(room_height), o_gula);
instance_create(random(room_width),
    random(room_height), o_codicia);
instance_create(random(room_width),
    random(room_height), o_orgullo);
instance_create(random(room_width),
    random(room_height), o_envidia);
instance_create(random(room_width),
    random(room_height), o_pereza);
instance_create(random(room_width),
    random(room_height), o_ira);
instance_create(random(room_width),
    random(room_height), o_lujuria);
s_crea_almas(-1);
repeat 100 {
    instance_create(0, 0, o_vapor);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>randomize();
alarm[0] = irandom(room_speed * 10);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// reloj
if (arte and ver_puzzle) or (!arte and ver_libro) {
    dlt = 0;
}
else if acelera and !arte {
    dlt = min(0.1, delta_time * 0.000001 * 2);
}
else {
    dlt = min(0.1, delta_time * 0.000001);
}
reloj_manual = max(0, reloj_manual - dlt);
tooltip = "";
// mover camara en simulacion
if !arte {
    if !s_cam_move(mouse_x, mouse_y, id) and !s_cam_zoom(mouse_x, mouse_y) {
        if seguirlo != noone {
            if instance_exists(seguirlo) {
                s_cam_sigue(seguirlo);
            }
            else {
                seguirlo = noone;
            }
        }
    }
}
// crear mas oro
reloj_oro -= dlt;
if reloj_oro &lt;= 0 {
    reloj_oro += random_range(30, 60);
    if instance_number(o_oro) &lt; m_oro_max * 0.25 {
        s_crea_oro(irandom_range(m_oro_max * 0.5, m_oro_max));
    }
}
// crear mas almas PID
reloj_almas -= dlt;
if reloj_almas &lt;= 0 {
    reloj_almas += 30;
    for (var i = m_pid_historial - 1; i &gt;= 1; i--) {
        historial[i] = historial[i - 1];
    }
    historial[0] = instance_number(o_alma);
    var sum = 0;
    for (var i = m_pid_long - 1; i &gt;= 1; i--) {
        error[i] = error[i - 1];
        sum += error[i];
    }
    error[0] = referencia - historial[0];
    if o_rey.despierto {
        sum += error[0];
        var act = pid[0] * error[0] + pid[1] * sum +
            pid[2] * (error[1] - error[0]);
        var aux, almi;
        repeat clamp(floor(act), 0, 10 * 4) {
            aux = instance_find(o_puerta, irandom(3));
            almi = instance_create(aux.x + random_range(-32, 32),
                aux.y + random_range(-32, 32), o_alma);
            if random(1) &lt; 0.5 {
                almi.chilla = random(m_delay_voz * 3);
            }
        }
    }
    // historial en palitos
    var altu = 140 / m_almas_max;
    for (var i = 0; i &lt; m_pid_historial; i++) {
        o_rey.palito[i].z = historial[i] * altu;
    }
}
// buscar jugador y mover camara
var camju = false;
if jugador == noone {
    if instance_exists(o_alma) {
        var tot = instance_number(o_alma);
        var freno = ceil(tot / 2);
        do {
            jugador = instance_find(o_alma, irandom(tot - 1));
            freno--;
        }
        until freno &lt;= 0 or jugador.culpa == m_culpa_ninguna;
    }
}
else if instance_exists(jugador) {
    if arte {
        s_cam_sigue(jugador);
        camju = true;
        // posicionar audio
        audio_listener_position(view_xview[0] + view_wview[0] / 2,
            view_yview[0] + view_hview[0] / 2, -view_hview[0] / 2);
    }
}
else {
    jugador = noone;
}
// hacer visibles los objetos
if arte {
    var vx = view_xview[0] + view_wview[0] / 2;
    var vy = view_yview[0] + view_hview[0] / 2;
    var hh = view_hview[0] * 0.55;
    if camju and point_distance(vx, vy, jugador.x, jugador.y - 90) &lt; hh + 100 {
        vx = jugador.x;
        vy = jugador.y - 90;
    }
    with o_visible {
        visible = point_distance(x, y, vx, vy) &lt; hh;
    }
}
// seleccionar movil con clic
if !arte and mouse_check_button_pressed(mb_left) {
    if ver_libro {
        ver_libro = false;
        exit;
    }
    var ok = true;
    with o_boton {
        if visible and over {
            ok = false;
            break;
        }
    }
    if ok {
        seguirlo = collision_point(mouse_x, mouse_y, o_movil, true, false);
    }
}
// comandos
if keyboard_check_pressed(vk_anykey) {
    if arte { // juego
        switch keyboard_key {
            case vk_enter:
                manual = !manual;
                with o_boton {
                    if tipo == m_bot_manejo {
                        esgris = !manual;
                        break;
                    }
                }
                break;
            case vk_space:
                s_see_puzzle(!ver_puzzle);
                break;
            case vk_backspace:
                if triunfo {
                    arte = false;
                    s_cambia_camara();
                }
                break;
        }
    }
    else { // simulacion
        switch keyboard_key {
            case vk_tab:
                with o_boton {
                    if tipo == m_bot_ver {
                        esgris = !esgris;
                        s_help();
                        break;
                    }
                }
                break;
            case vk_backspace:
                if instance_exists(o_input) {
                    with o_input {
                        var lll = string_length(edicion);
                        if lll == 1 {
                            edicion = "";
                        }
                        else if lll &gt; 1 {
                            edicion = string_copy(edicion, 1, lll - 1);
                        }
                    }
                }
                else {
                    arte = true;
                    s_cambia_camara();
                }
                break;
            case vk_enter:
                with o_input {
                    s_cambios(id);
                    instance_destroy();
                }
                break;
            default: // escritura
                with o_input {
                    var c = keyboard_lastchar;
                    var m = m_mask_pid;
                    if tipo != m_input_pid {
                        m = m_mask_gen;
                    }
                    if string_count(c, m) == 1 and
                            string_length(edicion) &lt; 20 {
                        edicion += c;
                    }
                }
                break;
        }
        keyboard_lastchar = "";
    }
    switch keyboard_key { // general
        case vk_escape:
            if instance_exists(o_input) {
                with o_input {
                    instance_destroy();
                }
            }
            else if !arte and ver_libro {
                ver_libro = false;
            }
            else if arte and ver_puzzle {
                s_see_puzzle(false);
            }
            else {
                game_end();
            }
            exit;
        case vk_f10:
            var f =  get_save_filename("PNG|*.png", "img");
            if f != "" {
                var h = 1024 * room_height / room_width;
                var s = surface_create(1024, h);
                surface_set_target(s);
                draw_surface_ext(application_surface,
                    0, 0, 1024 / surface_get_width(application_surface),
                    h / surface_get_height(application_surface),
                    0, c_white, 1);
                surface_reset_target();
                surface_save(s, f);
                surface_free(s);
            }
            break;
    }
    ver_libro = false;
    
    // trampa para triunfo
    if !triunfo {
        var c = string_lower(keyboard_lastchar);
        if string_count(c, m_mask_letras) == 1 {
            letras_trampa += c;
            var ll = string_length(m_trampota);
            var tt = string_length(letras_trampa);
            if tt &gt; ll {
                letras_trampa = string_copy(letras_trampa, tt - ll, ll);
            }
            if letras_trampa == m_trampota {
                s_triunfo();
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///simula
if !arte {
var esc;
// tooltip
if tooltip != "" {
    esc = view_wview[0] / m_width_gui;
    var xx = view_xview[0];
    var yy = view_yview[0];
    var e = 1;
    var alt = 96;
    with o_boton {
        if visible and over and tipo &gt;= m_bot_gula and tipo &lt;= m_bot_rey {
            alt = y - 64;
            break;
        }
    }
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_set_alpha(0.75);
    draw_rectangle_colour(xx + 32 * esc, yy + (alt - 20) * esc,
        xx + (64 + string_width(tooltip) * e) * esc, yy + (alt + 20) * esc,
        c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
    draw_text_transformed_colour(xx + (32 + 16) * esc, yy + alt * esc,
        tooltip, esc * e, esc * e, 0, c_black, c_black, c_black, c_black, 1);
}
// libro de puzzle resuelto
if !arte and ver_libro {
    // fondo blanco
    draw_set_alpha(0.75);
    draw_rectangle_colour(view_xview[0], view_yview[0],
        view_xview[0] + view_wview[0], view_yview[0] + view_hview[0],
        c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
    // monstruos
    var esc = view_wview[0] / m_width_libro;
    var mon = ds_priority_create();
    for (var m = 0; m &lt; 9; m++) {
        draw_sprite_ext(d_entes, m, view_xview[0] + (100 + m * 100) * esc,
            view_yview[0] + 250 * esc, esc, esc, 0, c_white, 1);
        ds_priority_add(mon, m, point_distance(100 + m * 100, 250,
            (mouse_x - view_xview[0]) * (1 / esc),
            (mouse_y - view_yview[0]) * (1 / esc)));
    }
    var m = ds_priority_find_min(mon);
    ds_priority_destroy(mon);
    // dibujar texto informativo
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    var xx = view_xview[0] + 500 * esc;
    var yy = view_yview[0] + 500 * esc;
    draw_sprite_ext(d_cartel, 0, xx, yy, esc * 1.7, esc * 1.5, 0, c_white, 1);
    draw_text_ext_transformed_colour(xx, yy, s_names(m) + "#........................#" +
        s_puzzle(m * 3) + "#........................#" +
        s_puzzle(m * 3 + 1) + "#........................#" + s_puzzle(m * 3 + 2),
        -1, 265 * esc * 1.7, esc, esc, 0, c_black, c_black, c_black, c_black, 1);
}
// fondo blanco para input
if instance_exists(o_input) {
    draw_set_alpha(0.75);
    draw_rectangle_colour(view_xview[0], view_yview[0],
        view_xview[0] + view_wview[0], view_yview[0] + view_hview[0],
        c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
}
// mensaje emergente
s_draw_input();
// mouse
esc = view_wview[0] / room_width;
draw_sprite_ext(d_mouse, 0, mouse_x, mouse_y,
    2 * esc, 2 * esc, 0, c_white, 1);
// fin
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///juego
if arte {
var xx = view_xview[0];
var yy = view_yview[0];
var esc;
// tooltip
if tooltip != "" {
    esc = view_wview[0] / m_width_gui;
    var e = 1;
    draw_set_halign(fa_left);
    draw_set_valign(fa_middle);
    draw_set_alpha(0.75);
    draw_rectangle_colour(xx + 32 * esc, yy + (96 - 20) * esc,
        xx + (64 + string_width(tooltip) * e) * esc, yy + (96 + 20) * esc,
        c_white, c_white, c_white, c_white, false);
    draw_set_alpha(1);
    draw_text_transformed_colour(xx + (32 + 16) * esc, yy + 96 * esc,
        tooltip, esc * e, esc * e, 0, c_black, c_black, c_black, c_black, 1);
}
// informacion del libro rompecabezas
if ver_puzzle {
    var esc = view_wview[0] / m_width_libro;
    for (var m = 0; m &lt; 9; m++) {
        draw_sprite(d_entes, m, view_xview[0] + (100 + m * 100) * esc,
            view_yview[0] + 150 * esc);
    }
}
// mouse
esc = view_wview[0] / room_width;
draw_sprite_ext(d_mouse, 0, mouse_x, mouse_y,
    4 * esc, 4 * esc, 0, c_white, 1);
//fin
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///simula
if !arte {
// historial
draw_line_width_colour(o_rey.x + 56, o_rey.y + 64,
    o_rey.x + 56 + m_pid_drawhist, o_rey.y + 64, 4, c_gray, c_gray);
draw_line_width_colour(o_rey.x + 56, o_rey.y - 64,
    o_rey.x + 56 + m_pid_drawhist, o_rey.y - 64, 4, c_gray, c_gray);
var paso = m_pid_drawhist / (m_pid_historial - 1);
var altu = 128 / m_almas_max;
for (var i = 0; i &lt; m_pid_historial; i++) {
    draw_line_width_colour(o_rey.x + 56 + i * paso, o_rey.y + 64,
        o_rey.x + 56 + i * paso, o_rey.y + 64 - historial[i] * altu,
        4, c_gray, c_gray);
}
// objetos en el plano
with o_oro {
    draw_sprite_ext(d_base1, 0, x, y,
        0.25, 0.25, 0, c_aqua, 1);
}
with o_cadaver {
    draw_sprite_ext(d_base1, 0, x, y,
        0.5, 0.5, 0, s_color(culpa), 0.5 *
        (reloj_cadaver / m_reloj_cadaver));
}
// indicadores
var tot = 0;
with o_monster {
    if despierto {
        tot++;
    }
}
if tot == 1 {
    with o_monster {
        if despierto {
            draw_circle_colour(x, y, m_vision * m_visimax_p, c_gray, c_gray, true);
            draw_circle_colour(x, y, m_vision * m_visimax_p - 1, c_gray, c_gray, true);
        }
    }
}
else {
    with o_monster {
        if despierto {
            draw_circle_colour(x, y, m_vision, c_gray, c_gray, true);
            draw_circle_colour(x, y, m_vision - 1, c_gray, c_gray, true);
        }
    }
}
with o_flor {
    draw_circle_colour(x, y, 32, c_gray, c_gray, true);
    draw_circle_colour(x, y, 32 - 1, c_gray, c_gray, true);
}
// fin
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///juego
if arte {
// suelo
var esc = view_hview[0] / 80;
var vx = view_xview[0] + view_wview[0] / 2;
var vy = view_yview[0] + view_hview[0] / 2;
var hh = view_hview[0] * 0.55;
if jugador != noone {
    if instance_exists(jugador) {
        if point_distance(vx, vy, jugador.x, jugador.y - 90) &lt; hh + 100 {
            vx = jugador.x;
            vy = jugador.y - 90;
        }
    }
}
draw_sprite_ext(d_vision, 0, vx, vy, esc, esc, 0, c_white, 1);
// sombras
with o_monster {
    if visible {
        draw_sprite(d_sombra, 0, x, y);
    }
}
with o_alma {
    if visible {
        draw_sprite(d_sombra, 1, x, y);
    }
}
with o_flor {
    if visible {
        draw_sprite(d_sombra, 2, x, y);
    }
}
with o_marchita {
    if visible {
        draw_sprite_ext(d_sombra, 2, x, y, 1, 1, 0,
            c_white, reloj_cadaver / m_reloj_cadaver);
    }
}
with o_cuerda {
    if visible and active {
        draw_sprite_ext(d_cuerda, 1, x, y, 1, 1, direction, c_white, 1);
    }
}
// objetos en el plano
with o_cadaver {
    if visible {
        if culpa == m_culpa_pereza {
            draw_sprite_ext(d_alma, 8 + culpa, x, y,
                1, 1, 0, c_white, reloj_cadaver / m_reloj_cadaver);
        }
    }
}
//fin
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
