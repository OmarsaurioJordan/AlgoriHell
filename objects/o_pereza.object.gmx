<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_monster</parentName>
  <maskName>d_base1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_ani_ini(id, 1, 0);
culpa = m_culpa_pereza;
despierto = true;
direction = random(360);
mover = choose(true, false);
reloj_errar = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_ani_osci(id, 0, m_ani_monsters, 0.1);
// cambiar de estado, despierto o dormido
reloj_errar -= dlt;
if reloj_errar &lt;= 0 {
    reloj_errar += random_range(m_reloj_accion, m_reloj_accion * 2);
    mover = !mover;
    direction = random(360);
    if mover {
        s_voz(x, y, m_culpa_pereza, true);
    }
    else if s_solo(m_culpa_pereza) {
        reloj_errar *= 0.5;
    }
}
// colision con objetos, luego ejecutar IA
if s_colisiones(id) and despierto {
    // errar libremente
    if mover {
        var v = m_velocidad * dlt;
        x += lengthdir_x(v, direction);
        y += lengthdir_y(v, direction);
        // resolver colision para convertir o matar
        var vict = instance_place(x, y, o_alma);
        if vict != noone {
            if vict.culpa != m_culpa_pereza {
                var oks = true;
                vict.culpa = m_culpa_pereza;
                reloj_errar = min(m_reloj_accion * 2, reloj_errar + 3);
                if vict == jugador and manual {
                    if o_control.reloj_manual != 0 {
                        oks = false;
                        with vict {
                            instance_destroy();
                        }
                    }
                }
                else if vict.mover {
                    oks = false;
                    with vict {
                        instance_destroy();
                    }
                }
                if oks {
                    vict.chilla = random(m_delay_voz * 2);
                }
            }
        }
        // perezosos cercanos
        var ss = s_solo(m_culpa_pereza);
        if ss {
            vict = s_cercanos(x, y, m_vision * m_visimax_p * 0.4, o_alma);
        }
        else {
            vict = s_cercanos(x, y, m_vision * 0.4, o_alma);
        }
        if is_array(vict) {
            for (var v = 0; v &lt; array_length_1d(vict); v++) {
                if vict[v].culpa == m_culpa_pereza {
                    continue;
                }
                if vict[v] == jugador and manual {
                    if o_control.reloj_manual == 0 {
                        vict[v].culpa = m_culpa_pereza;
                    }
                    else if ss {
                        vict[v].culpa = m_culpa_pereza;
                        with vict[v] {
                            instance_destroy();
                        }
                    }
                }
                else if !vict[v].mover {
                    vict[v].culpa = m_culpa_pereza;
                }
                else if ss {
                    vict[v].culpa = m_culpa_pereza;
                    with vict[v] {
                        instance_destroy();
                    }
                }
            }
        }
    }
}
// prevenir salirse del mundo
s_limites(id);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if arte {
    draw_sprite_ext(d_monster, m_culpa_pereza, x, y, 1, 1 + anima[0], 0, c_white, 1);
}
else {
    draw_sprite_ext(d_base1, 0, x, y, 1, 1, 0, s_color(m_culpa_pereza), 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
