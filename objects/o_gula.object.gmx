<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>o_monster</parentName>
  <maskName>d_base1</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>s_ani_ini(id, 1, 0);
culpa = m_culpa_gula;
despierto = true;
reloj_accion = random(m_reloj_accion);
reloj_calc = random(1);
direction = random(360);
cazar = noone;
reloj_comer = 0;
caca = 0;
reloj_caca = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// animacion
s_ani_osci(id, 0, m_ani_monsters, 0.1);
if reloj_comer != 0 {
    reloj_comer -= dlt;
    if reloj_comer &lt;= 0 {
        reloj_comer = 0;
        caca++;
    }
}
if caca &gt; 0 {
    if reloj_caca == 0 {
        reloj_caca = m_comer_reloj;
    }
    reloj_caca -= dlt;
    if reloj_caca &lt;= 0 {
        reloj_caca = 0;
        caca--;
        var aux = instance_create(x, y + 1, o_fosil);
        aux.culpa = m_culpa_gula;
    }
}
// ejecutar accion especial
reloj_accion -= dlt;
if reloj_accion &lt;= 0 {
    reloj_accion += m_reloj_accion + random(1);
    // verificar si debe comer
    if despierto and cazar == noone {
        var vision = m_vision;
        if s_solo(m_culpa_gula) {
            vision *= m_visimax_p;
        }
        var sum = 0;
        var mej = 0;
        var tot = 0;
        var fit, ddd;
        for (var d = 0; d &lt; 360; d += 45) {
            fit = s_conteo(x + lengthdir_x(vision, d),
                y + lengthdir_y(vision, d), vision, 0.1);
            if fit &gt; mej {
                mej = fit;
                ddd = d;
            }
            sum += fit;
            tot++;
        }
        if mej != 0 {
            sum /= tot;
            if sum / mej &gt; 0.666 {
                // convertir a alguno en guloso para perseguirlo
                var list = ds_list_create();
                var yo = id;
                with o_alma {
                    if point_distance(x, y, yo.x, yo.y) &lt; vision {
                        ds_list_add(list, id);
                    }
                }
                if !ds_list_empty(list) {
                    ds_list_shuffle(list);
                    cazar = ds_list_find_value(list, 0);
                    cazar.culpa = m_culpa_gula;
                    cazar.chilla = random(m_delay_voz);
                    s_voz(x, y, m_culpa_gula, true);
                }
                ds_list_destroy(list);
                // convertir a varios en gulosos
                var list = s_atrapa(x + lengthdir_x(vision * 0.75, ddd),
                    y + lengthdir_y(vision * 0.75, ddd), vision * 0.75);
                var aux;
                var freno = 6;
                for (var g = 0; g &lt; ds_list_size(list); g++) {
                    aux = ds_list_find_value(list, g);
                    aux.culpa = m_culpa_gula;
                    if random(1) &lt; 0.5 {
                        aux.chilla = random(m_delay_voz);
                    }
                    freno--;
                    if freno &lt;= 0 {
                        break;
                    }
                }
                ds_list_destroy(list);
            }
        }
    }
}
reloj_calc = max(0, reloj_calc - dlt);
// colision con objetos, luego ejecutar IA
if s_colisiones(id) and despierto {
    if cazar != noone {
        // perseguir guloso
        if instance_exists(cazar) {
            if cazar.culpa == m_culpa_gula {
                if point_distance(x, y, cazar.x, cazar.y) &gt; m_vision {
                    cazar = noone;
                }
                else {
                    direction = point_direction(x, y, cazar.x, cazar.y);
                    var v = m_velocidad * dlt;
                    x += lengthdir_x(v, direction);
                    y += lengthdir_y(v, direction);
                    if place_meeting(x, y, cazar) {
                        if reloj_comer != 0 {
                            caca++;
                        }
                        reloj_comer = m_comer_reloj;
                        with cazar {
                            instance_destroy();
                        }
                        cazar = noone;
                    }
                }
            }
            else {
                cazar = noone;
            }
        }
        else {
            cazar = noone;
        }
    }
    else {
        // gradiente ascendente
        if reloj_calc == 0 {
            reloj_calc = 0.5 + random(0.5);
            var vision = m_vision;
            if s_solo(m_culpa_gula) {
                vision *= m_visimax_p;
            }
            var dd = ds_priority_create();
            for (var d = 0; d &lt; 360; d += 45) {
                ds_priority_add(dd, d,
                    s_conteo(x + lengthdir_x(vision, d),
                    y + lengthdir_y(vision, d), vision, 0.1));
            }
            direction = ds_priority_find_max(dd);
            ds_priority_destroy(dd);
        }
        var v = m_velocidad * dlt;
        x += lengthdir_x(v, direction);
        y += lengthdir_y(v, direction);
    }
}
// prevenir salirse del mundo
s_limites(id);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if arte {
    if reloj_comer == 0 {
        draw_sprite_ext(d_monster, m_culpa_gula, x, y, 1, 1 + anima[0], 0, c_white, 1);
    }
    else {
        draw_sprite_ext(d_monster, 10, x, y, 1, 1 + anima[0], 0, c_white, 1);
    }
}
else {
    draw_sprite_ext(d_base1, 0, x, y, 1, 1, 0, s_color(m_culpa_gula), 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
