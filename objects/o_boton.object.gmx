<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 100;
tipo = 0; // definira que boton es
over = false; // si el mouse esta encima
esgris = false; // true pintarlo de gris

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if visible {
    if tipo == m_bot_simula and !o_control.triunfo { exit; }
    var esc = m_width_gui / view_wview[0];
    if (arte and ver_puzzle) or (!arte and o_control.ver_libro) or
            instance_exists(o_input) {
        over = false;
        exit;
    }
    over = point_distance(x, y,
        (mouse_x - view_xview[0]) * esc,
        (mouse_y - view_yview[0]) * esc) &lt; 32;
    if over {
        o_control.tooltip = s_tooltip(tipo);
        if mouse_check_button_pressed(mb_left) {
            switch tipo {
                case m_bot_ver:
                    esgris = !esgris;
                    s_help();
                    break;
                case m_bot_arte:
                    arte = true;
                    s_cambia_camara();
                    break;
                case m_bot_gula:
                    esgris = !s_despierto(true, o_gula);
                    break;
                case m_bot_codicia:
                    esgris = !s_despierto(true, o_codicia);
                    break;
                case m_bot_orgullo:
                    esgris = !s_despierto(true, o_orgullo);
                    break;
                case m_bot_envidia:
                    esgris = !s_despierto(true, o_envidia);
                    break;
                case m_bot_pereza:
                    esgris = !s_despierto(true, o_pereza);
                    break;
                case m_bot_ira:
                    esgris = !s_despierto(true, o_ira);
                    break;
                case m_bot_lujuria:
                    esgris = !s_despierto(true, o_lujuria);
                    break;
                case m_bot_alma:
                    esgris = !s_despierto(true, o_control);
                    break;
                case m_bot_rey:
                    esgris = !s_despierto(true, o_rey);
                    break;
                case m_bot_pid:
                    instance_create(0, 0, o_input);
                    break;
                case m_bot_gen:
                    var aux = instance_create(0, 0, o_input);
                    aux.tipo = m_input_gen;
                    break;
                case m_bot_map:
                    s_crea_arbol();
                    break;
                case m_bot_time:
                    o_control.acelera = !o_control.acelera;
                    esgris = o_control.acelera;
                    break;
                case m_bot_kill:
                    with o_alma {
                        instance_destroy();
                    }
                    break;
                case m_bot_pobla:
                    s_crea_almas(0);
                    break;
                case m_bot_foto:
                case m_bot_shot:
                    var f =  get_save_filename("PNG|*.png", "img");
                    if f != "" {
                        var h = 1024 * room_height / room_width;
                        var s = surface_create(1024, h);
                        surface_set_target(s);
                        draw_surface_ext(application_surface,
                            0, 0, 1024 / surface_get_width(application_surface),
                            h / surface_get_height(application_surface),
                            0, c_white, 1);
                        surface_reset_target();
                        surface_save(s, f);
                        surface_free(s);
                    }
                    break;
                case m_bot_libro:
                    o_control.ver_libro = !o_control.ver_libro;
                    break;
                case m_bot_pdf:
                    var f = get_save_filename("PDF|*.pdf", "HellgorHandbook");
                    if f != "" {
                        file_copy("HellgorHandbook.pdf", f);
                    }
                    break;
                case m_bot_restart:
                    s_inicio();
                    break;
                case m_bot_web:
                    url_open("https://linktr.ee/omwekiatl");
                    break;
                case m_bot_exit:
                    game_end();
                    break;
                case m_bot_simula:
                    if o_control.triunfo {
                        arte = false;
                        s_cambia_camara();
                    }
                    break;
                case m_bot_puzzle:
                    s_see_puzzle(true);
                    break;
                case m_bot_manejo:
                    manual = !manual;
                    esgris = !manual;
                    break;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if tipo == m_bot_simula and !o_control.triunfo { exit; }
var esc = view_wview[0] / m_width_gui;
var e = 1;
if over {
    e = 1.2;
}
var ccc = c_white;
if esgris {
    ccc = c_gray;
}
draw_sprite_ext(d_boton, 0, view_xview[0] + x * esc,
    view_yview[0] + y * esc, esc * e, esc * e, 0, ccc, 1);
draw_sprite_ext(d_boton, tipo, view_xview[0] + x * esc,
    view_yview[0] + y * esc, esc * e, esc * e, 0, ccc, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
